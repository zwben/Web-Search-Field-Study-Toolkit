# Generated by Django 3.2.7 on 2022-02-12 23:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user_system', '0002_auto_20220212_1738'),
    ]

    operations = [
        migrations.CreateModel(
            name='PageLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('page_type', models.CharField(blank=True, max_length=50, null=True)),
                ('page_title', models.CharField(blank=True, max_length=50, null=True)),
                ('origin', models.CharField(blank=True, max_length=50, null=True)),
                ('url', models.CharField(blank=True, max_length=1000, null=True)),
                ('referrer', models.CharField(blank=True, max_length=1000, null=True)),
                ('serp_link', models.CharField(blank=True, max_length=1000, null=True)),
                ('html', models.CharField(blank=True, max_length=10000000, null=True)),
                ('start_timestamp', models.IntegerField(blank=True, null=True)),
                ('end_timestamp', models.IntegerField(blank=True, null=True)),
                ('dwell_time', models.IntegerField(blank=True, null=True)),
                ('page_timestamps', models.CharField(blank=True, max_length=1000000, null=True)),
                ('query_string', models.CharField(blank=True, max_length=1000, null=True)),
                ('page_id', models.IntegerField(blank=True, null=True)),
                ('mouse_moves', models.CharField(blank=True, max_length=1000000, null=True)),
                ('clicked_results', models.CharField(blank=True, max_length=1000000, null=True)),
                ('clicked_others', models.CharField(blank=True, max_length=1000000, null=True)),
                ('bookmark', models.IntegerField(blank=True, default=-1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Query',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('partition_status', models.BooleanField(blank=True, default=False, null=True)),
                ('annotation_status', models.BooleanField(blank=True, default=False, null=True)),
                ('current_status', models.BooleanField(blank=True, default=False, null=True)),
                ('query_string', models.CharField(blank=True, max_length=1000, null=True)),
                ('start_timestamp', models.IntegerField(blank=True, null=True)),
                ('end_timestamp', models.IntegerField(blank=True, null=True)),
                ('life_start', models.IntegerField(blank=True, null=True)),
                ('life_end', models.IntegerField(blank=True, null=True)),
                ('interface', models.IntegerField(blank=True, default=1, null=True)),
                ('useful_pages', models.IntegerField(blank=True, default=-1, null=True)),
                ('clicking_results', models.IntegerField(blank=True, default=-1, null=True)),
                ('spending_time', models.IntegerField(blank=True, default=-1, null=True)),
                ('useful_information', models.IntegerField(blank=True, default=-1, null=True)),
                ('effort', models.IntegerField(blank=True, default=-1, null=True)),
                ('satisfaction', models.IntegerField(blank=True, default=-1, null=True)),
                ('recommendation', models.IntegerField(blank=True, default=-1, null=True)),
                ('problem', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskAnnotation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('specificity', models.IntegerField(blank=True, default=-1, null=True)),
                ('trigger', models.IntegerField(blank=True, default=-1, null=True)),
                ('task_condition', models.IntegerField(blank=True, default=-1, null=True)),
                ('task_response', models.CharField(blank=True, max_length=10000, null=True)),
                ('time_condition', models.IntegerField(blank=True, default=-1, null=True)),
                ('position_condition', models.IntegerField(blank=True, default=-1, null=True)),
                ('useful_information_task', models.IntegerField(blank=True, default=-1, null=True)),
                ('effort_task', models.IntegerField(blank=True, default=-1, null=True)),
                ('satisfaction_task', models.IntegerField(blank=True, default=-1, null=True)),
                ('recommendation_task', models.IntegerField(blank=True, default=-1, null=True)),
                ('annotation_status', models.BooleanField(blank=True, default=False, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.user')),
            ],
        ),
        migrations.CreateModel(
            name='SERPAnnotation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('usefulness_n', models.CharField(max_length=1000)),
                ('usefulness_0', models.CharField(max_length=1000)),
                ('usefulness_1', models.CharField(max_length=1000)),
                ('usefulness_2', models.CharField(max_length=1000)),
                ('serendipity_0', models.CharField(max_length=1000)),
                ('serendipity_1', models.CharField(max_length=1000)),
                ('serp_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_manager.pagelog')),
            ],
        ),
        migrations.CreateModel(
            name='QueryAnnotation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('inspiration', models.IntegerField(blank=True, null=True)),
                ('satisfaction', models.IntegerField(blank=True, null=True)),
                ('ending_type', models.IntegerField(blank=True, null=True)),
                ('other_reason', models.CharField(blank=True, max_length=1000, null=True)),
                ('other_relation', models.CharField(blank=True, max_length=1000, null=True)),
                ('belong_query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='task_manager.query')),
            ],
        ),
        migrations.AddField(
            model_name='query',
            name='task_annotation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='task_manager.taskannotation'),
        ),
        migrations.AddField(
            model_name='query',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.user'),
        ),
        migrations.CreateModel(
            name='PreSurvey',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('task_condition', models.IntegerField(blank=True, default=-1, null=True)),
                ('familarity', models.IntegerField(blank=True, default=-1, null=True)),
                ('pre_experience', models.IntegerField(blank=True, default=-1, null=True)),
                ('difficulty', models.IntegerField(blank=True, default=-1, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.user')),
            ],
        ),
        migrations.AddField(
            model_name='pagelog',
            name='belong_query',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='task_manager.query'),
        ),
        migrations.AddField(
            model_name='pagelog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.user'),
        ),
    ]
